#!/usr/bin/python3
import sys
from sys import stdin, stdout, stderr
import re

def get_data():
    """Puts data onto the list."""
    try:
        data = "".join([i for i in stdin])
        data = re.split('[,\n\s]', data)
        data = list(filter(None, data))
        try:
            data = [int(i) for i in data]
        except ValueError:
            data = [float(i) for i in data]
        return data
    except ValueError as e:
        stderr.write(f"Invalid input value: {e}\nTry: {sys.argv[0]} --help\n")
        exit(1)

def interval(data):
    """Returns a list of values describing the numeric change of number
    against the preceding one. The first one is always 0.
    Plus list of percent change rounded to two  decimals places.
    in:  [1, 5, 12, 1, 3, 4, 5, 5, 9, 8, -1, -20]
    out: [0, 4, 7, -11, 2, 1, 1, 0, 4, -1, -9, -19]
    %: [0.0,400.0,140.0,-91.67,250.0,14.29,25.0,0.0,80.0,-11.11,-112.5]"""
    first_num = None
    interval_data = []
    percent_data = []
    for i in data:
        try:
            interval_data.append(i - first_num)
            percent_data.append(round(((i - first_num) / first_num) * 100, 2))
        except TypeError:
            zero = int(0) if isinstance(i, int) else float(0)
            interval_data.append(zero)
            percent_data.append(zero)
        first_num = i

    return data, interval_data, percent_data

def verbose(data):
    print(f"Numbers:\tInterval:\tPercent Change:")
    for i, j, k in data:
        stdout.write(f"{i}\t\t{j}\t\t{k}%\n")

def single_data(data):
    for i in data:
        stdout.write(f"{i}\n")

def _help():
    print("""
Interval will calculate and print the numeric interval
between one numberand the next one in an input stream.

Default output with no argument is just this interval chage.

[-h | --help]       To get thist message.
[-p | --percent]    To get just percent change.
[-v | --verbose]    To get full overwiev of numbers with interval and percent change.
            """)
    exit(0)

def main():
    data, interval_data, percent_data = interval(get_data())
    verbose_data = list(zip(data ,interval_data, percent_data))  # list of tuples
    if bool(re.search(r'(-v|--verbose)', str(sys.argv))):
        verbose(verbose_data)
    elif bool(re.search(r'(-p|--percent)', str(sys.argv))):
        single_data(percent_data)
    elif bool(re.search(r'(-h|--help)', str(sys.argv))):
        _help()
    else:
        single_data(interval_data)

if __name__ == "__main__":
    main()

